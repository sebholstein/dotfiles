set -g default-terminal "screen-236color"
source "/usr/share/powerline/bindings/tmux/powerline.conf"

# unbind default prefix and set it to ctrl-a
unbind C-b
set -g prefix C-x
bind C-x send-prefix

# silence visual/acustic bell
set -g visual-activity off
set -g visual-bell off
set -g visual-silence off
setw -g monitor-activity off
set -g bell-action none

# start window/pane names with 1 (for keyboard navigation)
set -g base-index 1
set-window-option -g pane-base-index 1
# renumber windows sequentially after closing any of them
set -g renumber-windows on

# override escape time from 500 to 100 ms
set -s escape-time 100

# bigger history
set -g history-limit 10000

# for neovim compat
set-option -g focus-events on

set -g mouse on

# Reload Tmux config
bind r source-file ~/.tmux.conf \; display "Reloaded config"

bind u split-window  -h
bind i split-window 

# Undercurl
set -g default-terminal "${TERM}"
set -as terminal-overrides ',*:Smulx=\E[24::%p1%dm'  # undercurl support
set -as terminal-overrides ',*:Setulc=\E[78::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colours - needs tmux-3.0

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
# is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
# bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
# bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
# bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
# bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
# tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
# if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    # "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
# if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    # "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Resize the panes with prefix+arrow keys
bind Up resize-pane -U 5
bind Down resize-pane -D 5
bind Left resize-pane -L 5
bind Right resize-pane -R 5

# Rebind 'clear screen' to <prefix>+c-l
bind C-l send-keys 'C-l'

# Rebind spit and new-window commands to use current path
bind '"' split-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

# styling
set -g status-style fg=white,bg=black
set -g window-status-current-style fg=green,bg=black
set -g pane-active-border-style fg=green,bg=black
set -g window-status-format " #I:#W#F "
set -g window-status-current-format " #I:#W#F "
set -g window-status-current-style bg=green,fg=black
set -g window-status-activity-style bg=black,fg=yellow
set -g window-status-separator ""
set -g status-justify centre

# Use vim keybindings in copy mode
setw -g mode-keys vi
# Setup 'v' to begin selection as in Vim
bind-key -T copy-mode-vi v send -X begin-selection
# Setup 'y' to copy selection as in Vim
# Use reattach-to-user-namespace with pbcopy on OS X
# Use xclip on Linux
set -g set-clipboard off
if-shell 'test "$(uname -s)" = Darwin' 'bind-key -T copy-mode-vi y send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy 2> /dev/null"' 'bind-key -T copy-mode-vi y send -X copy-pipe-and-cancel "xclip -i -selection clipboard"'

# Move current window to the left with Ctrl-Shift-Left
bind-key -n C-S-Left swap-window -t -1
# Move current window to the right with Ctrl-Shift-Right
bind-key -n C-S-Right swap-window -t +1

# Open a "test" split-window at the bottom
bind T split-window -f -l 15 -c "#{pane_current_path}"
# Open a "test" split-window at the right
bind t split-window -h -f -p 35 -c "#{pane_current_path}"
